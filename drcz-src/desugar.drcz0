{ zdelukrowana wersja delukratora! }

(

(! desugar (^ (code) (if (@ code) code (if (= (. code) (quote quote)) code (if (= (. code) (quote ?)) (cond2if (, code) desugar) (if (= (. code) (quote or)) (or2if (, code) desugar) (if (= (. code) (quote and)) (and2if (, code) desugar) (if (= (. code) (quote let)) (let2lambda (, code) desugar) (; (desugar (. code)) (desugar (, code)))))))))))
(! cond2if (^ (condlist cont) (if (= condlist ()) () (if (= (.. condlist) (quote t)) (cont (.,. condlist)) (list4 (quote if) (cont (.. condlist)) (cont (.,. condlist)) (cond2if (, condlist) cont))))))
(! or2if (^ (orexp cont) (list4 (quote if) (cont (. orexp)) (quote t) (cont (., orexp)))))
(! and2if (^ (andexp cont) (list4 (quote if) (cont (. andexp)) (cont (., andexp)) ())))
(! let2lambda (^ (letexp cont) (; (; (quote ^) (; (extract-syms (. letexp)) (cont (, letexp)))) (extract-vals (. letexp)))))
(! .. (^ (e) (. (. e))))
(! ., (^ (e) (. (, e))))
(! .,. (^ (e) (. (, (. e)))))
(! list2 (^ (a b) (; a (; b ()))))
(! list3 (^ (a b c) (; a (; b (; c ())))))
(! list4 (^ (a b c d) (; a (; b (; c (; d ()))))))
(! mapcar (^ (p l) (if (= l ()) () (; (p (. l)) (mapcar p (, l))))))
(! extract-syms (^ (ab) (mapcar (^ (x) (. x)) ab)))
(! extract-vals (^ (ab) (mapcar (^ (x) (., x)) ab)))

)
