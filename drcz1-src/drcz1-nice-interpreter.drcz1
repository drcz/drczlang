{-(include std.drcz1)-}
{- quite usefull datastructures -}

{= LISTs: ====================================================================}

{ We use these ones so often, we found no reason to prepend their names with
  any singature - after all McCarthy called his language LISP for a reason... }

(! empty? (^ (l) (= l ())))
(! first  (^ (l) (. l)))
(! second (^ (l) (. (, l))))
(! third  (^ (l) (. (, (, l)))))
(! fourth (^ (l) (. (, (, (, l))))))
(! rest   (^ (l) (, l)))
(! push   (^ (el l) (; el l)))

(! length (^ (l)
             (if l (+ 1 (length (rest l))) {else} 0)))

(! append (^ (a b)
             (if (empty? a)
                 b
                 {else} (push (first a) (append (rest a) b)))))

(! reverse (^ (l)
              (let ((rev {<-} (^ (pend res)
                                 (if (empty? pend)
                                     res
                                     {else}(rev (rest pend) (push (first pend) res))))))
                   {in} (rev l ()))))

(! nth (^ (n l)
          (if (= n 1)
              (first l)
              {else} (nth (- n 1) (rest l)))))

(! map (^ (proc l)
          (if (empty? l)
              ()
              {else} (push (proc (first l)) (map proc (rest l))))))

{ since drcz1 does not allow to use free variables, we sometimes need an awkward version of map that
  passes additional arguments to proc: }

{mapg: [Exp x SExp -> SExp] x SExp x List<SExp> -> List<SExp> }
(! mapg (^ (proc args l) (if l (; (proc (. l) args) (mapg proc args (, l))) ())))

(! member? (^ (el l)
              (? ((empty? l) {=>} ())
                 ((= el (first l)) {=>} T)
                 (T {=>} (member? el (rest l))))))


{= A-LISTs: ==================================================================}

(! AL:new (^ (keys vals)
             (if keys
                 (push (; (first keys) (first vals))
                         (AL:new (rest keys) (rest vals)))
                 {else} ())))

(! AL:keys (^ (al)
              (if (empty? al)
                  ()
                  {else} (push (. (first al))
                               (AL:keys (rest al))))))

(! AL:add (^ (key val al)
             (push (; key val) al)))

{ notice these two take additional argument 'eq?' - a procedure of type ValxVal->Boolean
  settling equivalence of two values. }

(! AL:update (^ (key val al eq?)
                (if (empty? al)
                    (AL:add key val ())
                    {else} (if (eq? (. (first al)) key)
                               (AL:add key val (, al))
                               {else} (push (first al)
                                            (AL:update key val (rest al) eq?))))))
                    
(! AL:assoc (^ (key al eq?)
               (if (empty? al)
                   ()
                   {else} (if (eq? key (. (first al)))
                              (, (first al))
                              {else} (AL:assoc key (rest al) eq?)))))



{- drcz1 syntax - wkrÃ³tce (include drcz1-syntax.drcz1) -}

{ type EXPR: }

(! EXPR:nil? (^ (e) (= e ())))

(! EXPR:t?   (^ (e) (= e 't)))

(! EXPR:atom?    (^ (e) (@ e)))

(! EXPR:numeral? (^ (e) (# e)))

(! EXPR:symbol?  (^ (e) (all (EXPR:atom? e)
                             (not (EXPR:nil? e))
                             (not (EXPR:numeral? e)))))

(! EXPR:quoted? (^ (e) (all (not (EXPR:atom? e))
                            (= 'quote (. e))
                            (= (length e) 2))))

(! EXPR:qlist?  (^ (e) (and (not (EXPR:atom? e))
                            (= 'list (. e)))))

(! EXPR:lambda? (^ (e) (all (not (EXPR:atom? e))
                            (= '^ (. e))
                            (= (length e) 3))))

(! EXPR:definition? (^ (e) (all (not (EXPR:atom? e))
                                (= '! (. e))
                                (= (length e) 3))))

(! EXPR:let-form? (^ (e) (all (not (EXPR:atom? e))
                              (= 'let (. e))
                              (= (length e) 3))))


(! EXPR:if-form? (^ (e) (all (not (EXPR:atom? e))
                             (= 'if (. e))
                             (= (length e) 4))))

(! EXPR:cond-form? (^ (e) (and (not (EXPR:atom? e)) (= '? (. e)))))

(! EXPR:not-form? (^ (e) (all (not (EXPR:atom? e))
                              (= 'not (. e))
                              (= (length e) 2))))

(! EXPR:or-form? (^ (e) (all (not (EXPR:atom? e))
                             (= 'or (. e))
                             (= (length e) 3))))

(! EXPR:and-form? (^ (e) (all (not (EXPR:atom? e))
                              (= 'and (. e))
                              (= (length e) 3))))

(! EXPR:all-form? (^ (e) (all (not (EXPR:atom? e))
                              (= 'all (. e)))))

(! EXPR:any-form? (^ (e) (all (not (EXPR:atom? e))
                              (= 'any (. e)))))

(! EXPR:application? (^ (e) (and (not (EXPR:atom? e))
                                 (not (member? (. e) '(quote list ^ ! let if ? or and not all any include))))))


(! EXPR:quoted (^ (e) (second e)))

(! EXPR:arglist (^ (e) (second e)))
(! EXPR:body    (^ (e) (third e)))

(! EXPR:definiens   (^ (e) (second e)))
(! EXPR:definiendum (^ (e) (third e)))

(! EXPR:permise     (^ (e) (second e)))
(! EXPR:conclusion  (^ (e) (third e)))
(! EXPR:alternative (^ (e) (fourth e)))

(! EXPR:cond-list (^ (e) (rest e)))

(! EXPR:rator (^ (e) (first e)))
(! EXPR:rands (^ (e) (rest e)))

(! EXPR:file (^ (e) (second e)))
(! EXPR:expr (^ (e) (third e)))

(! EXPR:let-bindings (^ (e) (second e)))
(! EXPR:let-body (^ (e) (third e)))

(! EXPR:arg1 (^ (e) (second e)))
(! EXPR:arg2 (^ (e) (third e)))
(! EXPR:args (^ (e) (rest e)))

(! EXPR::primops '(. , ; # @ = > < + - * / % disp read load save halt))

(! EXPR:primop? (^ (e) (and (EXPR:atom? e) (member? e EXPR::primops))))

(! EXPR:primop-semantics
 (^ (o)
    (? ((= o '.) {=>} (^ (args)
                         (let ((a {<-} (first args)))
                              {in} (if (EXPR:atom? a)
                                       '(err)
                                       {else} (. a)))))
       ((= o ',) {=>} (^ (args)
                         (let ((a {<-} (first args)))
                              {in} (if (EXPR:atom? a)
                                       '(err)
                                       {else} (, a)))))
       ((= o ';) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))
                              {in} (; a b))))

       ((= o '#) {=>} (^ (args)
                         (let ((a {<-} (first args)))
                              {in} (# a))))

       ((= o '@) {=>} (^ (args)
                         (let ((a {<-} (first args)))
                              {in} (@ a))))

       ((= o '=) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))
                              {in} (= a b))))

       ((= o '<) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))                              
                              {in} (if (and (EXPR:numeral? a)
                                            (EXPR:numeral? b))
                                       (< a b)
                                       {else} '(err)))))

       ((= o '>) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))                              
                              {in} (if (and (EXPR:numeral? a)
                                            (EXPR:numeral? b))
                                       (> a b)
                                       {else} '(err)))))

       ((= o '+) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))                              
                              {in} (if (and (EXPR:numeral? a)
                                            (EXPR:numeral? b))
                                       (+ a b)
                                       {else} '(err)))))

       ((= o '-) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))                              
                              {in} (if (and (EXPR:numeral? a)
                                            (EXPR:numeral? b))
                                       (- a b)
                                       {else} '(err)))))

       ((= o '*) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))                              
                              {in} (if (and (EXPR:numeral? a)
                                            (EXPR:numeral? b))
                                       (* a b)
                                       {else} '(err)))))

       ((= o '/) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))                              
                              {in} (if (and (EXPR:numeral? a)
                                            (EXPR:numeral? b))
                                       (/ a b)
                                       {else} '(err)))))

       ((= o '%) {=>} (^ (args)
                         (let ((a {<-} (first args))
                               (b {<-} (second args)))                              
                              {in} (if (and (EXPR:numeral? a)
                                            (EXPR:numeral? b))
                                       (% a b)
                                       {else} '(err)))))

       ((= o 'disp) {=>} (^ (args) 
                            (let ((a {<-} (first args)))
                                 {in} (disp a))))

       ((= o 'read) {=>} (^ (args) (read)))

       ((= o 'save) {=>} (^ (args)
                            (let ((a {<-} (first args))
                                  (b {<-} (second args)))
                                 {in} (if (EXPR:symbol? a)
                                          (save a b)
                                          {else} '(err)))))

       ((= o 'load) {=>} (^ (args) 
                            (let ((a {<-} (first args)))
                                 {in} (if (EXPR:symbol? a)
                                          (load a)
                                          {else} '(err)))))

       ((= o 'halt) {=>} (^ (args) (halt)))

       (T {=>} ()))))

{----------------------------------------------------------}

{- Read-Eval-Print-Loop -}

(! REPL:include-form? (^ (e) (all (not (EXPR:atom? e))
                                  (= 'include (. e))
                                  (= (length e) 2))))

(! REPL:include-file (^ (e) (second e)))


(! repl (^ (exp env _) (repl-step (eval exp env ()) env repl)))

(! repl-step (^ (res topenv cont)
                (let ((exp {<-} (first res))
                      (env {<-} (second res))
                      (err {<-} (third res))
                      (topenv {<~} topenv)
                      (  cont {<~} cont))
                     {in} (if err
                              (cont (read) topenv (disp err))
                              {else} (cont (read) env (disp exp))))))


{- The Great Evaluator... -}

(! eval (^ (exp env err) { : SExp x Env x Err -> SExp x Env x Err }
           (if err
               (list exp env err)
               {else} (? ((any (EXPR:nil? exp)
                               (EXPR:t? exp)
                               (EXPR:numeral? exp)) {=>} (list exp env err))

                         ((EXPR:symbol? exp) {=>} (lookup exp env))

                         ((EXPR:quoted? exp) {=>} (list (EXPR:quoted exp) env err))

                         ((EXPR:lambda? exp) {=>} (list exp env err))

                         ((EXPR:definition? exp) {=>} (eval-definition (EXPR:definiens exp)
                                                                       (eval (EXPR:definiendum exp) env err)
                                                                       env))
                         ((EXPR:let-form? exp) {=>} (eval-let-form (EXPR:let-bindings exp)
                                                                   (EXPR:let-body exp)
                                                                   env))

                         ((EXPR:if-form? exp) {=>} (eval-if-form (EXPR:permise exp)
                                                                 (EXPR:conclusion exp)
                                                                 (EXPR:alternative exp)
                                                                 env))
                         ((EXPR:not-form? exp) {=>} (eval-not-form (EXPR:arg1 exp) env))
                         ((EXPR:or-form? exp) {=>} (eval-or-form (EXPR:arg1 exp) (EXPR:arg2 exp) env))
                         ((EXPR:and-form? exp) {=>} (eval-and-form (EXPR:arg1 exp) (EXPR:arg2 exp) env))
                         ((EXPR:any-form? exp) {=>} (eval-any-form (EXPR:args exp) env))
                         ((EXPR:all-form? exp) {=>} (eval-all-form (EXPR:args exp) env))
                         ((EXPR:cond-form? exp) {=>} (eval-cond-form (EXPR:cond-list exp) env))

                         ((REPL:include-form? exp) {=>} (eval-include (REPL:include-file exp) env))

                         ((EXPR:application? exp) {=>} (apply (EXPR:rator exp) (EXPR:rands exp) env))
                         (T {=>} (list exp env (syntax-error)))))))


{- ...handling applications -}

(! apply (^ (rator rands env)
            (let ((rator {<-} (eval rator env ()))
                  (rands {<-} (evlis rands env))
                  (env {<~} env))
                 {in} (let ((rator {<-} (first rator))
                            (rands {<-} (first rands))
                            (err-1 {<-} (third rator))
                            (err-2 {<-} (third rands))
                            (env {<~} env)) 
                           {in} (? (err-1 {=>} (list rator env err-1))
                                   (err-2 {=>} (list rands env err-2))
                                   ((EXPR:primop? rator) {=>} (apply-primop rator rands env))
                                   ((EXPR:lambda? rator) {=>} (eval-lambda (EXPR:arglist rator)
                                                                           (EXPR:body rator)
                                                                           rands
                                                                           env))
                                   (T {=>} (syntax-error)))))))


(! apply-primop (^ (op args env)
                   (let ((op {<-} (EXPR:primop-semantics op))
                         (args {<~} args)
                         ( env {<~} env))
                        (if op
                            (list (op args) env ())
                            {else} (list () env (undefined-error (; op args)))))))
                        
                        
(! eval-lambda (^ (arglist body args env)
                  (let ((new-env {<-} (add-new-bindings arglist args env))
                        (body {<~} body)
                        ( env {<~} env))
                       {in} (let ((new-env {<-} (first new-env))
                                  (    err {<-} (third new-env))
                                  (body {<~} body)
                                  ( env {<~} env))
                                 {in} (if err
                                          (list new-env env err)
                                          {else} (eval-lambda-step (eval body new-env ()) env))))))

(! eval-lambda-step (^ (res env)
                       (let ((val {<-} (first res))
                             (err {<-} (third res))
                             (env {<~} env))
                            {in} (list val env err))))

(! evlis (^ (l env)
            (if (empty? l)
                (list () env ())
                {else} (evlis-step (eval (first l) env ()) (rest l) env))))

(! evlis-step (^ (res l-rest env)
                 (let ((val {<-} (first res))
                       (err {<-} (third res))
                       (l-rest {<~} l-rest)
                       (   env {<~} env))
                      {in} (if err
                               (list val env err)
                               {else} (evlis-next val (evlis l-rest env) env)))))

(! evlis-next (^ (val el-rest env)
                 (let ((el-rest {<-} (first el-rest))
                       (    err {<-} (third el-rest))
                       (val {<~} val)
                       (env {<~} env))
                      {in} (if err
                               (list val env err)
                               {else} (list (push val el-rest) env ())))))
                                            

{- ...handling branchings -}

(! eval-if-form (^ (perm concl alt env) (eval-if-step (eval perm env ()) concl alt env)))

(! eval-if-step (^ (res concl alt env)
                   (let ((val {<-} (first res))
                         (err {<-} (third res))
                         (concl {<~} concl)
                         (  alt {<~} alt)
                         (  env {<~} env))
                        {in} (? (err {=>} (list val env err))
                                (val {=>} (eval concl env ()))
                                (  T {=>} (eval alt env ()))))))

                                   
(! eval-cond-form (^ (condlist env)
                     (if (empty? condlist)
                         (list () env ())
                         {else} (eval-cond-step (eval (first (first condlist)) env ())
                                                (second (first condlist))
                                                (rest condlist)
                                                env))))


(! eval-cond-step (^ (perm concl cond-rest env)
                     (let ((val {<-} (first perm))
                           (err {<-} (third perm))
                           (    concl {<~} concl)
                           (cond-rest {<~} cond-rest)
                           (      env {<~} env))
                          {in} (? (err {=>} (list val env err))
                                  (val {=>} (eval concl env ()))
                                  (  T {=>} (eval-cond-form cond-rest env))))))



(! eval-not-form (^ (expr env) (eval-not-step (eval expr env ()) env)))

(! eval-not-step (^ (res env)
                    (let ((val {<-} (first res))
                          (err {<-} (third res))
                          (env {<~} env))
                         {in} (if err
                                  (list val env err)
                                  {else} (list (if val () {else} T) env ())))))


(! eval-or-form (^ (e1 e2 env) (eval-or-step1 (eval e1 env ()) e2 env)))

(! eval-or-step1 (^ (res1 e2 env)
                    (let ((val1 {<-} (first res1))
                          (err1 {<-} (third res1))
                          ( e2 {<~} e2)
                          (env {<~} env))
                         {in} (? (err1 {=>} (list val1 env err1))
                                 (val1 {=>} (list 'T env ()))
                                 (   T {=>} (eval-or-step2 (eval e2 env ()) env))))))

(! eval-or-step2 (^ (res2 env)
                    (let ((val2 {<-} (first res2))
                          (err2 {<-} (third res2))
                          (env {<~} env))
                         {in} (? (err2 {=>} (list val2 env err2))
                                 (val2 {=>} (list 'T env ()))
                                 (   T {=>} (list () env ()))))))

(! eval-and-form (^ (e1 e2 env) (eval-and-step1 (eval e1 env ()) e2 env)))

(! eval-and-step1 (^ (res1 e2 env)
                     (let ((val1 {<-} (first res1))
                           (err1 {<-} (third res1))
                           ( e2 {<~} e2)
                           (env {<~} env))
                          {in} (? (err1 {=>} (list val1 env err1))
                                  (val1 {=>} (eval-and-step2 (eval e2 env ()) env))
                                  (   T {=>} (list () env ()))))))

(! eval-and-step2 (^ (res2 env)
                     (let ((val2 {<-} (first res2))
                           (err2 {<-} (third res2))
                           (env {<~} env))
                          {in} (? (err2 {=>} (list val2 env err2))
                                  (val2 {=>} (list 'T env ()))
                                  (   T {=>} (list () env ()))))))

(! eval-any-form (^ (l env)
                    (if l
                        (eval-any-step (eval (first l) env ()) (rest l) env)
                        {else} (list () env ()))))

(! eval-any-step (^ (res l-rest env)
                    (let ((val {<-} (first res))
                          (err {<-} (third res))
                          (l-rest {<~} l-rest)
                          (   env {<~} env))
                         {in} (? (err {=>} (list val env err))
                                 (val {=>} (list 'T env ()))
                                 (  T {=>} (eval-any-form l-rest env))))))

(! eval-all-form (^ (l env)
                    (if l
                        (eval-all-step (eval (first l) env ()) (rest l) env)
                        {else} (list T env ()))))

(! eval-all-step (^ (res l-rest env)
                    (let ((val {<-} (first res))
                          (err {<-} (third res))
                          (l-rest {<~} l-rest)
                          (   env {<~} env))
                         {in} (? (err {=>} (list val env err))
                                 (val {=>} (eval-all-form l-rest env))
                                 (  T {=>} (list () env ()))))))


{- ...handling i/o -}

(! eval-include (^ (file env)
                   (let ((src {<-} (load file))
                         (env {<~} env))
                        {in} (eval-include-all src env))))

(! eval-include-all (^ (incl env)
                       (if incl
                           (eval-include-step (eval (first incl) env ()) (rest incl) env)
                           {else} (list 'T env ()))))

(! eval-include-step (^ (res incl-rest env)
                        (let ((   val {<-} (first res))
                              (   env {<-} (second res))
                              (   err {<-} (third res))
                              (incl-rest {<~} incl-rest))
                             {in} (if err
                                      (list val env err)
                                      {else} (eval-include-all incl-rest env)))))
 

{- ...handling environment manipulations -}

(! eval-definition (^ (sym val env)
                      (let (( val {<-} (first val))
                            ( env {<-} (second val))
                            ( err {<-} (third val))
                            (oenv {<-} env)
                            ( sym {<~} sym))
                           {in} (if err
                                    (list val oenv err)
                                    {else} (list val (AL:add sym val env) ())))))

(! lookup (^ (sym env)
             (let ((val {<-} (AL:assoc sym env (^ (x y) (= x y))))
                   (sym {<~} sym)
                   (env {<~} env))
                  {in} (list val env ()))))

(! add-new-bindings (^ (keys vals env)
                       (if (all (not (EXPR:atom? keys))
                                (not (EXPR:atom? vals))
                                (= (length keys) (length vals)))
                           (list (append (AL:new keys vals) env) env ())
                           {else} (wrong-argcount-error))))

(! eval-let-form (^ (bindings body env)
                    (eval-let-step (letbindings2env bindings env) body env)))

(! eval-let-step (^ (res body env)
                    (let ((val {<-} (first res))
                          (err {<-} (third res))
                          (body {<~} body)
                          ( env {<~} env))
                         {in} (if err
                                  (list val env err)
                                  {else} (eval body val ())))))

(! letbindings2env (^ (bnd env)
                      (if bnd
                          (let ((curr-bnd {<-} (first bnd))
                                (rest-bnd {<-} (rest bnd))
                                (env {<~} env))
                               {in} (letbindings2env-step (first curr-bnd)
                                                          (eval (second curr-bnd) env ())
                                                          rest-bnd
                                                          env))
                          {else} (list env env ()))))

(! letbindings2env-step (^ (name res bnd-rest env)
                           (let ((val {<-} (first res))
                                 (err {<-} (third res))
                                 (    name {<~} name)
                                 (bnd-rest {<~} bnd-rest)
                                 (     env {<~} env))
                                {in} (if err
                                         (list val env err)
                                         {else} (let ((bnd-rest {<-} (letbindings2env bnd-rest env))
                                                      (name {<~} name)
                                                      ( env {<~} env)
                                                      ( val {<~} val))
                                                     {in} (let ((bnd-rest {<-} (first bnd-rest))
                                                                (     err {<-} (third bnd-rest))
                                                                (name {<~} name)
                                                                ( env {<~} env)
                                                                ( val {<~} val))
                                                                {in} (if err
                                                                         (list val env err)
                                                                         {else} (list (AL:add name val bnd-rest)
                                                                                      env
                                                                                      ()))))))))


(! init-env (^ () (AL:new EXPR::primops EXPR::primops)))


{- error messages -}
(! syntax-error (^ () '(err: syntax error !))) 
(! undefined-error (^ (sym) (list 'err: 'undefined 'symbol sym '!)))
(! wrong-argcount-error (^ () '(err: wrong number of arguments !)))


{-main-}
(repl (read) (init-env) (disp '(drcz1 --- ready.)))
