{ -= 997-procentowy satanista i kanibal, Gdańsk 2012-11-04 =- }

{ to niezwykłe, ale zasadniczo to działa. }

(include fcl-datatypes.drcz1)

(! LABEL:pp (^ (l) (. l)))
(! LABEL:vs (^ (l) (, l)))
(! LABEL:new (^ (pp vs) (; pp vs)))

(! LABEL:new2 (^ (pp vs live-vars-map)
                 (; pp (normalize vs (AL:assoc pp live-vars-map PP:eq?))))) {!}

(! LABEL:eq? (^ (l1 l2)
                (and (PP:eq? (LABEL:pp l1) (LABEL:pp l2))
                     (STORE:eq? (LABEL:vs l1) (LABEL:vs l2)))))

(! call? (^ (expr) (and (not (@ expr)) (= (first expr) 'call))))
(! call-pp (^ (expr) (second expr)))
(! call-live (^ (expr) (rest (rest expr))))

{------------------------------------------------------------------------------------------}
(! specialize
   (^ (program div init-vals live-vars-map)
      (PROGRAM:new (diff (PROGRAM:input-names program) div)
                   (LABEL:new2 (PROGRAM:start-pp program) (AL:new div init-vals) live-vars-map)
                   (drive (list (LABEL:new2 (PROGRAM:start-pp program)
                                            (AL:new div init-vals)
                                            live-vars-map))
                     { we assume all inputs live at initial block, therefore no normalisation is needed } 
                          ()
                          (PROGRAM:block-map program)
                          live-vars-map))))
                                         
(! drive
   (^ (pend res program live-vars-map)
      (if (empty? pend)
          res
          {else} (let ((  pp {<-} (LABEL:pp (disp (first pend))))
                       (  vs {<-} (LABEL:vs (first pend)) {!})
                       (pend {<-} (rest pend))
                       (          res {<~} res)
                       (      program {<~} program)
                       (live-vars-map {<~} live-vars-map))
                      {in} (if (AL:has-key? (LABEL:new pp vs) res LABEL:eq?) { already driven? }
                               (drive pend res program live-vars-map)
                               {else} (let ((new-block {<-} (drive-block (AL:assoc pp program PP:eq?)
                                                                         vs
                                                                         program
                                                                         live-vars-map))
                                            (    label {<-} (LABEL:new pp vs))
                                            (           vs {<~} vs)
                                            (         pend {<~} pend)
                                            (          res {<~} res)
                                            (      program {<~} program)
                                            (live-vars-map {<~} live-vars-map))
                                           {in} (drive (append (successors new-block) pend)
                                                       (AL:add label new-block res)
                                                       program
                                                       live-vars-map)))))))

(! normalize (^ (vs live-vars) (AL:filter-by-keys live-vars vs VARIABLE:eq?)))

(! successors
 (^ (cb)
    (if cb
        (? ((and (CMD:let? (first cb))
                 (call? (CMD:let-expression (first cb))))
            {=>} (push (call-pp (CMD:let-expression (first cb)))
                       (successors (rest cb))))
           ((CMD:if? (first cb))
            {=>} (list (CMD:if-then-pp (first cb)) (CMD:if-else-pp (first cb))))
           ((CMD:goto? (first cb))
            {=>} (list (CMD:goto-pp (first cb))))
           (T {=>} (successors (rest cb))))
        {else} ())))

(! drive-block
   (^ (code vs program live-vars-map)
      (let ((  op {<-} (first (first  code)))
            (args {<-} (rest (first code)))
            (code {<-} (rest code))
            (           vs {<~} vs)
            (      program {<~} program)
            (live-vars-map {<~} live-vars-map))
           {in} (? ((= op 'goto) {=>} (drive-block (AL:assoc (disp (first args)) program PP:eq?)
                                                   (disp (normalize vs (AL:assoc (first args) live-vars-map PP:eq?)))
                                                   program
                                                   live-vars-map))
                   ((= op 'return) {=>} (list (CMD:mk-return (reduce (first args) vs))))
                   ((= op 'if) {=>} (drive-if (first args) (second args) (third args) vs program live-vars-map))
                   ((= op 'let) {=>} (drive-let (first args) (second args) vs code program live-vars-map))))))


(! drive-if
   (^ (permise pp1 pp2 vs program live-vars-map)
      (if (static? permise (AL:keys vs))
          (if (eval-expr permise vs) { jedziemy z c.tr.otf! }
              (drive-block (AL:assoc (disp pp1) program PP:eq?)
                           (disp (normalize vs (AL:assoc pp1 live-vars-map PP:eq?)))
                           program
                           live-vars-map)
              {else} (drive-block (AL:assoc (disp pp2) program PP:eq?)
                                  (disp (normalize vs (AL:assoc pp2 live-vars-map PP:eq?)))
                                  program
                                  live-vars-map))
          {else} (list (CMD:mk-if (reduce permise vs)
                                  (LABEL:new2 pp1 vs live-vars-map)
                                  (LABEL:new2 pp2 vs live-vars-map))))))

(! drive-let
   (^ (var expr vs code program live-vars-map)
      (if (static? expr (AL:keys vs))
          (if (call? expr)
              (drive-block code (STORE:update var (run-block (call-pp expr) vs program) vs) program live-vars-map)
              {else} (drive-block code (STORE:update var (eval-expr expr vs) vs) program live-vars-map))
          {else} (if (call? expr)
                     (push (CMD:mk-let var (list 'call (LABEL:new2 (call-pp expr) vs live-vars-map)))
                           (drive-block code (STORE:drop var vs) program live-vars-map))
                     {else} (push (CMD:mk-let var (reduce expr vs))
                                  (drive-block code (STORE:drop var vs) program live-vars-map))))))


(! static? (^ (expr div)
              (? ((= expr ()) {=>} T)
                 ((# expr) {=>} T)
                 ((@ expr) {=>} (member? expr div))
                 ((= (. expr) 'quote) {=>} T)
                 ((= (. expr) 'gen) {=>} ())
                 ((= (. expr) 'call) {=>} (stat-env? (, (, expr)) div)) {!}
                 (T {=>} (stat-list? (rest expr) div)))))

(! stat-env? (^ (live div)
                (if live
                    (if (memberg? (first live) div VARIABLE:eq?)
                        (stat-env? (rest live) div)
                        {else} ())
                    {else} T)))

(! stat-list? (^ (lst div)
                 (? ((empty? lst) {=>} T)
                    ((static? (first lst) div) {=>} (stat-list? (rest lst) div))
                    (T {=>} ()))))

(! reduce (^ (expr vs)
             (? ((static? expr (AL:keys vs))
                 {=>} (if (or (@ expr) (not (= (. expr) 'quote)))
                          (list 'quote (eval-expr expr vs))
                          {else} expr))
                ((@ expr) {=>} expr) {,,dynamic var''}
                (T {=>} (; (. expr) (reduce-list (, expr) vs))))))

(! reduce-list (^ (lst vs)
                  (if (empty? lst)
                      ()
                      {else} (push (reduce (first lst) vs)
                             (reduce-list (rest lst) vs)))))

{ no i eval samyż... }

(! eval-expr { EXPR x STORE -> SE }
 (^ (expr store)
    (? ((= expr ()) {=>} ())
       ((# expr) {=>} expr)
       ((@ expr) {=>} (STORE:lookup expr store))
       ((= (first expr) 'quote) {=>} (second expr))
       (T {=>} (apply-op (first expr)
                         (evlis-expr (rest expr) store))))))

(! apply-op (^ (op argvals)
               (? ((= op '+) {=>} (+ (first argvals) (second argvals)))
                  ((= op '-) {=>} (- (first argvals) (second argvals)))
                  ((= op '*) {=>} (* (first argvals) (second argvals)))
                  ((= op '/) {=>} (/ (first argvals) (second argvals)))
                  ((= op '%) {=>} (% (first argvals) (second argvals)))
                  ((= op '>) {=>} (> (first argvals) (second argvals)))
                  ((= op '<) {=>} (< (first argvals) (second argvals)))
                  ((= op '=) {=>} (= (first argvals) (second argvals)))
                  ((= op '#) {=>} (# (first argvals)))
                  ((= op '@) {=>} (@ (first argvals)))
                  ((= op '.) {=>} (if (first argvals) (. (first argvals)) {else} ()))
                  ((= op ',) {=>} (if (first argvals) (, (first argvals)) {else} ()))
                  ((= op ';) {=>} (; (first argvals) (second argvals)))
                  ((= op 'list) {=>} argvals)
                  ((= op 'diff) {=>} (diff (first argvals) (second argvals)))
                  ((= op 'drop) {=>} (drop-all (first argvals) (second argvals)))
                  ((= op 'intersect) {=>} (intersect (first argvals) (second argvals)))
		  ((= op 'append) {=>} (append (first argvals) (second argvals)))
                  ((= op 'AL:new) {=>} (AL:new (first argvals) (second argvals)))
                  ((= op 'AL:has-key?) {=>} (AL:has-key? (first argvals) (second argvals) LABEL:eq?)) { !!! }
                  ((= op 'AL:lookup) {=>} (AL:assoc (first argvals) (second argvals) eq-rec?))
                  ((= op 'AL:update) {=>} (AL:update (first argvals) (second argvals) (third argvals) eq-rec?))
                  ((= op 'AL:drop) {=>} (AL:drop (first argvals) (second argvals) eq-rec?))
                  ((= op 'AL:drop-many) {=>} (AL:drop-many (first argvals) (second argvals) eq-rec?))
                  ((= op 'AL:filter-by-keys) {=>} (AL:filter-by-keys (first argvals) (second argvals) eq-rec?))
                  ((= op 'FCL:evalexpr) {=>} (eval-expr (first argvals) (second argvals)))
                  ((= op 'FCL:reduce) {=>} (reduce (first argvals) (second argvals)))
		  ((= op 'FCL:call?) {=>} (call? (first argvals)))
		  ((= op 'static?) {=>} (static? (first argvals) (second argvals))) {!}
		  ((= op 'gen) {=>} (first argvals))
                  (T {=>} (list 'ERR 'apply-primop: 'unknow 'operator op '!)))))
               
(! evlis-expr (^ (expr-list store)
                 (if (empty? expr-list)
                     ()
                     {else} (; (eval-expr (first expr-list) store)
                               (evlis-expr (rest expr-list) store)))))



{ a od kiedy mamy calle, wymagany jest też cały interpreter... =========================================================== }

(! run-block { Pp x STORE x BLOCK-MAP -> SE }
 (^ (pp store block-map)
    (step (BLOCK-MAP:find pp block-map) store block-map)))
                
(! step { CODE-BLOCK x STORE x BLOCK-MAP -> SE }
 (^ (code-block store block-map)
    (let ((      cmd {<-} (CODE-BLOCK:first-cmd code-block))
          (  cb-rest {<-} (CODE-BLOCK:rest-cmds code-block))
          (    store {<~} store)
          (block-map {<~} block-map))
         {in} (? (   (CMD:let? cmd) {=>} (step cb-rest
                                               (STORE:update (CMD:let-variable cmd)
                                                             (let ((expr {<-} (CMD:let-expression cmd))
                                                                   (    store {<~} store)
                                                                   (block-map {<~} block-map))
                                                                  {in} (if (call? expr)
                                                                           (run-block (call-pp expr) store block-map)
                                                                           {else} (eval-expr expr store)))
                                                             store)
                                               block-map))

                 (  (CMD:goto? cmd) {=>} (run-block (CMD:goto-pp cmd) store block-map))

                 (    (CMD:if? cmd) {=>} (if (eval-expr (CMD:if-condition cmd) store)
                                             (run-block (CMD:if-then-pp cmd) store block-map)
                                             {else} (run-block (CMD:if-else-pp cmd) store block-map)))

                 ((CMD:return? cmd) {=>} (let ((expr {<-} (CMD:return-expression cmd))
                                               (    store {<~} store)
                                               (block-map {<~} block-map))
                                              {in} (if (call? expr)
                                                       (run-block (call-pp expr) store block-map)
                                                       {else} (eval-expr expr store))))
                 (                T {=>} (list 'ERR 'step: 'unknown 'command cmd))))))



{= testy, odloty ===========================================================================}

(! drc
'((program inputs)
 init

 (init (let D (gen ()))
       (let R inputs)
       (let C program)
       (let PR ())
       (let PD ())
       (let DRC (call step D R C PR PD))
       (return (. (. (, DRC))))) { zwraca (. R) }

 (step (if (= C ()) end step2))

 (end (return (list D R C PR PD))) { w sumie zawsze C==()... }

 (step2 (let cmd (. C))
        (let C (, C))
        (goto check-const))

 (check-const   (if (= cmd 'CONST) do-const check-proc))
 (check-proc    (if (= cmd 'PROC) do-proc check-lookup))
 (check-lookup  (if (= cmd 'LOOKUP) do-lookup check-plookup))
 (check-plookup (if (= cmd 'PLOOKUP) do-plookup check-name))
 (check-name    (if (= cmd 'NAME) do-name check-pname))
 (check-pname   (if (= cmd 'PNAME) do-pname check-forget))
 (check-forget  (if (= cmd 'FORGET) do-forget check-pforget))
 (check-pforget (if (= cmd 'PFORGET) do-pforget check-select))
 (check-select  (if (= cmd 'SELECT) do-select check-apply))
 (check-apply   (if (= cmd 'APPLY) do-apply check-cons))
 (check-cons (if (= cmd 'CONS) do-cons check-car))
 (check-car  (if (= cmd 'CAR) do-car check-cdr))
 (check-cdr  (if (= cmd 'CDR) do-cdr check-eq))
 (check-eq   (if (= cmd 'EQ) do-eq check-num))
 (check-num  (if (= cmd 'NUM) do-num check-atom))
 (check-atom (if (= cmd 'ATOM) do-atom check-add))
 (check-add  (if (= cmd 'ADD) do-add check-sub))
 (check-sub  (if (= cmd 'SUB) do-sub check-mul))
 (check-mul  (if (= cmd 'MUL) do-mul check-div))
 (check-div  (if (= cmd 'DIV) do-div check-mod))
 (check-mod  (if (= cmd 'MOD) do-mod check-gt))
 (check-gt   (if (= cmd 'GT) do-gt check-lt))
 (check-lt   (if (= cmd 'LT) do-lt err))

 (err (return (list 'ERROR 'UNKNOWN 'COMMAND cmd)))

 (do-const (let exp (. C))
           (let C (, C))
           (let R (; exp R))
           (goto step))

 (do-proc (let proc (. C))
          (let C (, C))
          (let PR (; proc PR)) {!}
          (goto step))

 (do-lookup (let var (. C))
            (let C (, C))
            (let R (; (. (AL:lookup var D)) R))
            (goto step))

 (do-name (let var (. C))
          (let val (. R))
          (let C (, C))
          (let R (, R))
          (let D (AL:update var (; val (AL:lookup var D)) D))
          (goto step))

 (do-forget (let var (. C))
            (let C (, C))
	    (let D (AL:update var (, (AL:lookup var D)) D))
            (goto step))

 (do-plookup (let var (. C))
             (let C (, C))
             (let PR (; (. (AL:lookup var PD)) PR))
             (goto step))

 (do-pname (let var (. C))
           (let proc (. PR))
           (let C (, C))
           (let PR (, PR)) {!}
           (let PD (AL:update var (; proc (AL:lookup var PD)) PD))
           (goto step))

 (do-pforget (let var (. C))
             (let C (, C))
	     (let PD (; (AL:update var (, (AL:lookup var PD)) PD) ()))
             (goto step))

 (do-select (let perm (. R))
            (let R (, R))
            (let concl (. C))
            (let alt (. (, C)))
            (let C (, (, C)))
            (if perm do-concl do-alt))

 (do-concl (let C (append concl C))
           (goto step))

 (do-alt (let C (append alt C))
         (goto step))

 (do-apply (let proc (. PR))
           (let PR (, PR))
           (let oC C)
	   (let C proc)
           (let DRC (call step D R C PR PD))
           (let D (. DRC))
           (let R (. (, DRC)))
           (let PR (. (, (, DRC))))
           (let PD (. (, (, (, DRC)))))
           (let C oC)
           (goto step))

 (do-cons (let arg1 (. R))
          (let arg2 (. (, R)))
          (let R (, (, R)))
          (let res (; arg1 arg2))
          (let R (; res R))
          (goto step))

 (do-car (let arg1 (. R))
         (let R (, R))
         (let res (. arg1))
         (let R (; res R))
         (goto step))

 (do-cdr (let arg1 (. R))
         (let R (, R))
         (let res (, arg1))
         (let R (; res R))
         (goto step))

 (do-eq (let arg1 (. R))
        (let arg2 (. (, R)))
        (let R (, (, R)))
        (let res (= arg1 arg2))
        (let R (; res R))
        (goto step))

 (do-num (let arg1 (. R))
         (let R (, R))
         (let res (# arg1))
         (let R (; res R))
         (goto step))

 (do-atom (let arg1 (. R))
          (let R (, R))
          (let res (@ arg1))
          (let R (; res R))
          (goto step))

 (do-add (let arg1 (. R))
         (let arg2 (. (, R)))
         (let R (, (, R)))
         (let res (+ arg1 arg2))
         (let R (; res R))
         (goto step))

 (do-sub (let arg1 (. R))
         (let arg2 (. (, R)))
         (let R (, (, R)))
         (let res (- arg1 arg2))
         (let R (; res R))
         (goto step))

 (do-mul (let arg1 (. R))
         (let arg2 (. (, R)))
         (let R (, (, R)))
         (let res (* arg1 arg2))
         (let R (; res R))
         (goto step))

 (do-div (let arg1 (. R))
         (let arg2 (. (, R)))
         (let R (, (, R)))
         (let res (/ arg1 arg2))
         (let R (; res R))
         (goto step))

 (do-mod (let arg1 (. R))
         (let arg2 (. (, R)))
         (let R (, (, R)))
         (let res (% arg1 arg2))
         (let R (; res R))
         (goto step))

 (do-gt (let arg1 (. R))
        (let arg2 (. (, R)))
        (let R (, (, R)))
        (let res (> arg1 arg2))
        (let R (; res R))
        (goto step))

 (do-lt (let arg1 (. R))
        (let arg2 (. (, R)))
        (let R (, (, R)))
        (let res (< arg1 arg2))
        (let R (; res R))
        (goto step))
) )

(! drc-live
  {live-map}
'(
(init program inputs)
(step d r pd pr c)
(end d r c pr pd)
(step2 pr pd d r c)
(check-const d r pd pr c cmd)
(check-proc pr pd d r c cmd)
(check-lookup d r pd pr c cmd)
(check-plookup r pr pd d c cmd)
(check-name d r pr pd c cmd)
(check-pname d pr pd c r cmd)
(check-forget d r pd pr c cmd)
(check-pforget d pr pd r c cmd)
(check-select d pr pd r c cmd)
(check-apply d pr pd r c cmd)
(check-cons d pr pd r c cmd)
(check-car d pr pd r c cmd)
(check-cdr d pr pd r c cmd)
(check-eq d pr pd r c cmd)
(check-num d pr pd r c cmd)
(check-atom d pr pd r c cmd)
(check-add d pr pd r c cmd)
(check-sub d pr pd r c cmd)
(check-mul d pr pd r c cmd)
(check-div d pr pd r c cmd)
(check-mod d r pr pd c cmd)
(check-gt d r pr pd c cmd)
(check-lt d pr pd r c cmd)
(err cmd)
(do-const d r pd pr c)
(do-proc d r pd pr c)
(do-lookup d r pd pr c)
(do-name d r pd pr c)
(do-forget d r pd pr c)
(do-plookup d r pd pr c)
(do-pname d r pd pr c)
(do-pforget d r pd pr c)
(do-select d pr pd r c)
(do-concl concl d r pd pr c)
(do-alt alt d r pd pr c)
(do-apply d r pd pr c)
(do-cons d r pd pr c)
(do-car d r pd pr c)
(do-cdr d r pd pr c)
(do-eq d r pd pr c)
(do-num d r pd pr c)
(do-atom d r pd pr c)
(do-add d r pd pr c)
(do-sub d r pd pr c)
(do-mul d r pd pr c)
(do-div d r pd pr c)
(do-mod d r pd pr c)
(do-gt d r pd pr c)
(do-lt d r pd pr c)
 )
)

(! drc-div '(program))

(! init-vals
 '({prog:}

{ z tym niestety ma problem, wciąga mianowicie cały 'interpreter DRC' do wyniku...

 (PROC (PNAME p
        NAME l
        LOOKUP l
        CONST ()
        EQ
        SELECT (CONST ())
               (LOOKUP l
                CDR
                PLOOKUP p
                PLOOKUP map
                APPLY                
                LOOKUP l
                CAR
                PLOOKUP p
                APPLY
                CONS)
        PFORGET p
        FORGET l)
  PNAME map
  PROC (NAME x LOOKUP x LOOKUP x MUL FORGET x)
  PNAME sq
  PLOOKUP sq
  PLOOKUP map
  APPLY)}


  (PROC (NAME x LOOKUP x LOOKUP x MUL FORGET x)
   PNAME sq
   PROC (NAME l
         LOOKUP l
         CONST ()
         EQ
         SELECT (CONST ())
                (LOOKUP l
                 CDR
                 PLOOKUP sqlist
                 APPLY
                 LOOKUP l
                 CAR
                 PLOOKUP sq
                 APPLY
                 CONS)
        FORGET l)
   PNAME sqlist
   PLOOKUP sqlist
   APPLY)

{
  (PROC (NAME a
         NAME b
         LOOKUP a
         CONST ()
         EQ
         SELECT (LOOKUP b)
                (LOOKUP b
                 LOOKUP a
                 CDR
                 PLOOKUP apd
                 APPLY
                 LOOKUP a
                 CAR
                 CONS)
        FORGET a
        FORGET b)
   PNAME apd
   PLOOKUP apd
   APPLY)
}
  ))

(specialize drc drc-div init-vals drc-live)


{IT WORKS!!!!!}

{ Wyniczek:

}