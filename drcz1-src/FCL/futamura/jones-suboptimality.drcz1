{ generates fcl*->fcl* compiler }

(include fcl-datatypes.drcz1)

(! LABEL:pp (^ (l) (. l)))
(! LABEL:vs (^ (l) (, l)))
(! LABEL:new (^ (pp vs) (; pp vs)))

(! LABEL:new2 (^ (pp vs live-vars-map)
                 (; pp (normalize vs (AL:assoc pp live-vars-map PP:eq?))))) {!}

(! LABEL:eq? (^ (l1 l2)
                (and (PP:eq? (LABEL:pp l1) (LABEL:pp l2))
                     (STORE:eq? (LABEL:vs l1) (LABEL:vs l2)))))

(! call? (^ (expr) (and (not (@ expr)) (= (first expr) 'call))))
(! call-pp (^ (expr) (second expr)))
(! call-live (^ (expr) (rest (rest expr))))

{------------------------------------------------------------------------------------------}
(! specialize
   (^ (program div init-vals live-vars-map)
      (PROGRAM:new (diff (PROGRAM:input-names program) div)
                   (LABEL:new2 (PROGRAM:start-pp program) (AL:new div init-vals) live-vars-map)
                   (drive (list (LABEL:new2 (PROGRAM:start-pp program)
                                            (AL:new div init-vals)
                                            live-vars-map))
                     { we assume all inputs live at initial block, therefore no normalisation is needed } 
                          ()
                          (PROGRAM:block-map program)
                          live-vars-map))))
                                         
(! drive
   (^ (pend res program live-vars-map)
      (if (empty? pend)
          res
          {else} (let ((  pp {<-} (disp (LABEL:pp (first pend))))
                       (  vs {<-} (LABEL:vs (first pend)) {!})
                       (pend {<-} (rest pend))
                       (          res {<~} res)
                       (      program {<~} program)
                       (live-vars-map {<~} live-vars-map))
                      {in} (if (AL:has-key? (LABEL:new pp vs) res LABEL:eq?) { already driven? }
                               (drive pend res program live-vars-map)
                               {else} (let ((new-block {<-} (drive-block (AL:assoc pp program PP:eq?)
                                                                         vs
                                                                         program
                                                                         live-vars-map))
                                            (    label {<-} (LABEL:new pp vs))
                                            (           vs {<~} vs)
                                            (         pend {<~} pend)
                                            (          res {<~} res)
                                            (      program {<~} program)
                                            (live-vars-map {<~} live-vars-map))
                                           {in} (drive (append (successors new-block) pend)
                                                       (AL:add label new-block res)
                                                       program
                                                       live-vars-map)))))))

(! normalize (^ (vs live-vars) (AL:filter-by-keys live-vars vs VARIABLE:eq?)))

(! successors
 (^ (cb)
    (if cb
        (? ((and (CMD:let? (first cb))
                 (call? (CMD:let-expression (first cb))))
            {=>} (push (call-pp (CMD:let-expression (first cb)))
                       (successors (rest cb))))
           ((CMD:if? (first cb))
            {=>} (list (CMD:if-then-pp (first cb)) (CMD:if-else-pp (first cb))))
           ((CMD:goto? (first cb))
            {=>} (list (CMD:goto-pp (first cb))))
           (T {=>} (successors (rest cb))))
        {else} ())))

(! drive-block
   (^ (code vs program live-vars-map)
      (let ((  op {<-} (first (first  code)))
            (args {<-} (rest (first code)))
            (code {<-} (rest code))
            (           vs {<~} vs)
            (      program {<~} program)
            (live-vars-map {<~} live-vars-map))
           {in} (? ((= op 'goto) {=>} (drive-block (AL:assoc (first args) program PP:eq?)
                                                   (normalize vs (AL:assoc (first args) live-vars-map PP:eq?))
                                                   program
                                                   live-vars-map))
                   ((= op 'return) {=>} (list (CMD:mk-return (reduce (first args) vs))))
                   ((= op 'if) {=>} (drive-if (first args) (second args) (third args) vs program live-vars-map))
                   ((= op 'let) {=>} (drive-let (first args) (second args) vs code program live-vars-map))))))


(! drive-if
   (^ (permise pp1 pp2 vs program live-vars-map)
      (if (static? permise (AL:keys vs))
          (if (eval-expr permise vs) { jedziemy z c.tr.otf! }
              (drive-block (AL:assoc pp1 program PP:eq?)
                           (normalize vs (AL:assoc pp1 live-vars-map PP:eq?))
                           program
                           live-vars-map)
              {else} (drive-block (AL:assoc pp2 program PP:eq?)
                                  (normalize vs (AL:assoc pp2 live-vars-map PP:eq?))
                                  program
                                  live-vars-map))
          {else} (list (CMD:mk-if (reduce permise vs)
                                  (LABEL:new2 pp1 vs live-vars-map)
                                  (LABEL:new2 pp2 vs live-vars-map))))))

(! drive-let
   (^ (var expr vs code program live-vars-map)
      (if (static? expr (AL:keys vs))
          (if (call? expr)
              (drive-block code (STORE:update var (run-block (call-pp expr) vs program) vs) program live-vars-map)
              {else} (drive-block code (STORE:update var (eval-expr expr vs) vs) program live-vars-map))
          {else} (if (call? expr)
                     (push (CMD:mk-let var (list 'call (LABEL:new2 (call-pp expr) vs live-vars-map)))
                           (drive-block code (STORE:drop var vs) program live-vars-map))
                     {else} (push (CMD:mk-let var (reduce expr vs))
                                  (drive-block code (STORE:drop var vs) program live-vars-map))))))

{coś +- takiego...  teraz reduce'a i static?'a by wypadało wymodzić... }

(! static? (^ (expr div)
              (? ((= expr ()) {=>} T)
                 ((# expr) {=>} T)
                 ((@ expr) {=>} (member? expr div))
                 ((= (. expr) 'quote) {=>} T)
                 ((= (. expr) 'gen) {=>} ())
                 ((= (. expr) 'call) {=>} (stat-env? (, (, expr)) div)) {!}
                 (T {=>} (stat-list? (rest expr) div)))))

(! stat-env? (^ (live div)
                (if live
                    (if (memberg? (first live) div VARIABLE:eq?)
                        (stat-env? (rest live) div)
                        {else} ())
                    {else} T)))

(! stat-list? (^ (lst div)
                 (? ((empty? lst) {=>} T)
                    ((static? (first lst) div) {=>} (stat-list? (rest lst) div))
                    (T {=>} ()))))

(! reduce (^ (expr vs)
             (? ((static? expr (AL:keys vs))
                 {=>} (if (or (@ expr) (not (= (. expr) 'quote)))
                          (list 'quote (eval-expr expr vs))
                          {else} expr))
                ((@ expr) {=>} expr) {,,dynamic var''}
                (T {=>} (; (. expr) (reduce-list (, expr) vs))))))

(! reduce-list (^ (lst vs)
                  (if (empty? lst)
                      ()
                      {else} (push (reduce (first lst) vs)
                             (reduce-list (rest lst) vs)))))

{ no i eval samyż... }

(! eval-expr { EXPR x STORE -> SE }
 (^ (expr store)
    (? ((= expr ()) {=>} ())
       ((# expr) {=>} expr)
       ((@ expr) {=>} (STORE:lookup expr store))
       ((= (first expr) 'quote) {=>} (second expr))
       (T {=>} (apply-op (first expr)
                         (evlis-expr (rest expr) store))))))

(! apply-op (^ (op argvals)
               (? ((= op '+) {=>} (+ (first argvals) (second argvals)))
                  ((= op '-) {=>} (- (first argvals) (second argvals)))
                  ((= op '*) {=>} (* (first argvals) (second argvals)))
                  ((= op '/) {=>} (/ (first argvals) (second argvals)))
                  ((= op '%) {=>} (% (first argvals) (second argvals)))
                  ((= op '>) {=>} (> (first argvals) (second argvals)))
                  ((= op '<) {=>} (< (first argvals) (second argvals)))
                  ((= op '=) {=>} (= (first argvals) (second argvals)))
                  ((= op '#) {=>} (# (first argvals)))
                  ((= op '@) {=>} (@ (first argvals)))
                  ((= op '.) {=>} (if (first argvals) (. (first argvals)) {else} ()))
                  ((= op ',) {=>} (if (first argvals) (, (first argvals)) {else} ()))
                  ((= op ';) {=>} (; (first argvals) (second argvals)))
                  ((= op 'list) {=>} argvals)
                  ((= op 'diff) {=>} (diff (first argvals) (second argvals)))
                  ((= op 'drop) {=>} (drop-all (first argvals) (second argvals)))
                  ((= op 'intersect) {=>} (intersect (first argvals) (second argvals)))
		  ((= op 'append) {=>} (append (first argvals) (second argvals)))
                  ((= op 'AL:new) {=>} (AL:new (first argvals) (second argvals)))
                  ((= op 'AL:has-key?) {=>} (AL:has-key? (first argvals) (second argvals) LABEL:eq?)) { !!! }
                  ((= op 'AL:lookup) {=>} (AL:assoc (first argvals) (second argvals) eq-rec?))
                  ((= op 'AL:update) {=>} (AL:update (first argvals) (second argvals) (third argvals) eq-rec?))
                  ((= op 'AL:drop) {=>} (AL:drop (first argvals) (second argvals) eq-rec?))
                  ((= op 'AL:drop-many) {=>} (AL:drop-many (first argvals) (second argvals) eq-rec?))
                  ((= op 'AL:filter-by-keys) {=>} (AL:filter-by-keys (first argvals) (second argvals) eq-rec?))
                  ((= op 'FCL:evalexpr) {=>} (eval-expr (first argvals) (second argvals)))
                  ((= op 'FCL:reduce) {=>} (reduce (first argvals) (second argvals)))
		  ((= op 'FCL:call?) {=>} (call? (first argvals)))
		  ((= op 'static?) {=>} (static? (first argvals) (second argvals))) {!}
		  ((= op 'gen) {=>} (first argvals))
                  (T {=>} (list 'ERR 'apply-primop: 'unknow 'operator op '!)))))
               
(! evlis-expr (^ (expr-list store)
                 (if (empty? expr-list)
                     ()
                     {else} (; (eval-expr (first expr-list) store)
                               (evlis-expr (rest expr-list) store)))))



{ a od kiedy mamy calle, wymagany jest też cały interpreter... =========================================================== }

(! run-block { Pp x STORE x BLOCK-MAP -> SE }
 (^ (pp store block-map)
    (step (BLOCK-MAP:find pp block-map) store block-map)))
                
(! step { CODE-BLOCK x STORE x BLOCK-MAP -> SE }
 (^ (code-block store block-map)
    (let ((      cmd {<-} (CODE-BLOCK:first-cmd code-block))
          (  cb-rest {<-} (CODE-BLOCK:rest-cmds code-block))
          (    store {<~} store)
          (block-map {<~} block-map))
         {in} (? (   (CMD:let? cmd) {=>} (step cb-rest
                                               (STORE:update (CMD:let-variable cmd)
                                                             (let ((expr {<-} (CMD:let-expression cmd))
                                                                   (    store {<~} store)
                                                                   (block-map {<~} block-map))
                                                                  {in} (if (call? expr)
                                                                           (run-block (call-pp expr) store block-map)
                                                                           {else} (eval-expr expr store)))
                                                             store)
                                               block-map))

                 (  (CMD:goto? cmd) {=>} (run-block (CMD:goto-pp cmd) store block-map))

                 (    (CMD:if? cmd) {=>} (if (eval-expr (CMD:if-condition cmd) store)
                                             (run-block (CMD:if-then-pp cmd) store block-map)
                                             {else} (run-block (CMD:if-else-pp cmd) store block-map)))

                 ((CMD:return? cmd) {=>} (let ((expr {<-} (CMD:return-expression cmd))
                                               (    store {<~} store)
                                               (block-map {<~} block-map))
                                              {in} (if (call? expr)
                                                       (run-block (call-pp expr) store block-map)
                                                       {else} (eval-expr expr store))))
                 (                T {=>} (list 'ERR 'step: 'unknown 'command cmd))))))



{= testy, odloty ===========================================================================}

(! ONMIX
'((program division init-vals live-map)
 0
 (0 (let pp (. (, program)))
    (let vs (AL:new division init-vals))
    (let new-vars (diff (. program) division))
    (let division (intersect division (AL:lookup pp live-map)))
    (let vs (AL:filter-by-keys division vs))
    (let block-map (, (, program)))
    (let code ())
    (let code (call 1 pp vs division live-map block-map code))
    (return (; new-vars (; (; pp vs) code))))

 (1 (if (AL:has-key? (; pp vs) code) 2 3))

 (2 (return code))

 (3 (let new-block ())
    (let new-label (; pp vs))
    (goto 4))

 (4 (let block (AL:lookup pp block-map))
    (goto 5))

 (5 (let cmd (. block))
    (let block (, block))
    (let operator (. cmd))
    (if (= operator 'let) 6 13))

 (6 (let var (. (, cmd)))
    (let rhs (. (, (, cmd))))
    (if (static? rhs division) 7 10))

 (7 (if (FCL:call? rhs) 8 9))

 (8 (let call-pp (. (, rhs)))
    (let pp1 pp)
    (let pp call-pp)
    (let value (call 50 pp vs block-map))
    (let pp pp1)
    (let vs (AL:update var value vs))
    (let division (; var division))
    (goto 5))

 (9 (let vs (AL:update var (FCL:evalexpr rhs vs) vs))
    (let division (; var division))
    (goto 5))

 (10 (if (FCL:call? rhs) 11 12))

 (11 (let pp (. (, rhs)))
     (let live-vars (diff (, (, rhs)) division))
     (let division1 division)
     (let vs1 vs)
     (let division (intersect division (AL:lookup pp live-map)))
     (let vs (AL:filter-by-keys division vs))
     (let new-block (append new-block (list (list 'let var (; 'call (; (; pp vs) live-vars))))))
     (let code (call 1 pp vs division live-map block-map code))
     (let division (drop var division1))
     (let vs (AL:drop var vs1))
     (goto 5))

 (12 (let new-block (append new-block (list (list 'let var (FCL:reduce rhs vs)))))
     (let division (drop var division))
     (let vs (AL:drop var vs)) {!}
     (goto 5))

 (13 (if (= operator 'if) 14 19))

 (14 (let condition (. (, cmd)))
     (let pp1 (. (, (, cmd))))
     (let pp2 (. (, (, (, cmd)))))
     (let division1 (intersect (AL:lookup pp1 live-map) division))
     (let division2 (intersect (AL:lookup pp2 live-map) division))
     (if (static? condition division) 15 18))

 (15 (if (FCL:evalexpr condition vs) 16 17))

 (16 (let pp pp1)
     (let division division1)
     (goto 4))

 (17 (let pp pp2)
     (let division division2)
     (goto 4))

 (18 (let vs1 (AL:filter-by-keys division1 vs))
     (let vs2 (AL:filter-by-keys division2 vs))
     (let new-block (append new-block (list (list 'if (FCL:reduce condition vs) (; pp1 vs1) (; pp2 vs2)))))
     (let code (AL:update new-label new-block code))
     (let pp pp1)
     (let vs vs1)
     (let division division1)
     (let code (call 1 pp vs division live-map block-map code))
     (let pp pp2)
     (let vs vs2)
     (let division division2)
     (let code (call 1 pp vs division live-map block-map code))
     (return code))

 (19 (if (= operator 'goto) 20 21))

 (20 (let pp (. (, cmd)))
     (let division (intersect (AL:lookup pp live-map) division))
     (goto 4))

 (21 (if (= operator 'return) 22 23))

 (22 (let expr (. (, cmd)))
     (let new-block (append new-block (list (list 'return (FCL:reduce expr vs)))))
     (let code (AL:update new-label new-block code))
     (return code))

 (23 (return (list 'error: cmd)))

  { and now the metacircular interpreter:
    (pp vs block-map)
    50 }

  (50 (let block (AL:lookup pp block-map))
      (goto 51))

  (51 (let cmd (. block))
      (let block (, block))
      (let operator (. cmd))
      (if (= operator 'let) 52 55))
  
  (52 (let var (. (, cmd)))
      (let rhs (. (, (, cmd))))
      (if (@ rhs) 54 521))

  (521 (if (= (. rhs) 'call) 53 54))
  
  (53 (let pp (. (, rhs)))
      (let value (call 50 pp vs block-map))
      (let vs (AL:update var value vs))
      (goto 51))

  (54 (let vs (AL:update var (FCL:evalexpr rhs vs) vs))
      (goto 51))
  
  (55 (if (= operator 'if) 56 59))
  
  (56 (let pp1 (. (, (, cmd))))
      (let pp2 (. (, (, (, cmd)))))
      (if (FCL:evalexpr (. (, cmd)) vs) 57 58))
 
  (57 (let pp pp1)
      (goto 50))

 (58 (let pp pp2)
     (goto 50))

 (59 (if (= operator 'goto) 60 61))

 (60 (let pp (. (, cmd)))
     (goto 50))

 (61 (if (= operator 'return) 62 23))

 (62 (return (FCL:evalexpr (. (, cmd)) vs))) ))

(! onmix-live 
'(
(0 init-vals program live-map division)
(1 pp vs code live-map division block-map)
(2 code)
(3 pp live-map division block-map code vs)
(4 pp live-map block-map division new-label code new-block vs)
(5 pp block block-map live-map division new-label code new-block vs)
(6 cmd pp block live-map division block-map new-label code new-block vs)
(7 var rhs pp block live-map block-map division new-label code new-block vs)
(8 var rhs pp block block-map live-map division new-label code new-block vs)
(9 var rhs pp block block-map live-map division new-label code new-block vs)
(10 var rhs pp block live-map block-map division new-label code new-block vs)
(11 var rhs block block-map live-map division new-label code new-block vs)
(12 var rhs pp block block-map live-map division new-label code new-block vs)
(13 live-map division block-map operator new-label code new-block vs cmd)
(14 division cmd new-label new-block code vs block-map live-map)
(15 condition division1 pp1 division2 pp2 live-map block-map new-label code new-block vs)
(16 division1 pp1 live-map block-map new-label code new-block vs)
(17 division2 pp2 live-map block-map new-label code new-block vs)
(18 new-label new-block condition pp1 pp2 division2 division1 vs code live-map block-map)
(19 live-map division block-map operator new-label code new-block vs cmd)
(20 cmd live-map block-map division new-label code new-block vs)
(21 operator new-label code new-block vs cmd)
(22 new-label code new-block vs cmd)
(23 cmd)
(50 pp block-map vs)
(51 block block-map vs)
(52 cmd block block-map vs)
(521 var rhs block block-map vs)
(53 var rhs block block-map vs)
(54 var rhs block block-map vs)
(55 block-map operator vs cmd)
(56 cmd block-map vs)
(57 pp1 block-map vs)
(58 pp2 block-map vs)
(59 block-map operator vs cmd)
(60 cmd block-map vs)
(61 operator vs cmd)
(62 cmd vs) ))

(! onmix-div '(program division live-map))

(! init-vals2
'({program}
  
 ((pp vs block-map)
  50

  (50 (let block (AL:lookup pp block-map))
      (goto 51))

  (51 (let cmd (. block))
      (let block (, block))
      (let operator (. cmd))
      (if (= operator 'let) 52 55))
  
  (52 (let var (. (, cmd)))
      (let rhs (. (, (, cmd))))
      (if (@ rhs) 54 521))

  (521 (if (= (. rhs) 'call) 53 54))
  
  (53 (let pp (. (, rhs)))
      (let value (call 50 pp vs block-map))
      (let vs (AL:update var value vs))
      (goto 51))

  (54 (let vs (AL:update var (FCL:evalexpr rhs vs) vs))
      (goto 51))
  
  (55 (if (= operator 'if) 56 59))
  
  (56 (let pp1 (. (, (, cmd))))
      (let pp2 (. (, (, (, cmd)))))
      (if (FCL:evalexpr (. (, cmd)) vs) 57 58))
 
  (57 (let pp pp1)
      (goto 50))

 (58 (let pp pp2)
     (goto 50))

 (59 (if (= operator 'goto) 60 61))

 (60 (let pp (. (, cmd)))
     (goto 50))

 (61 (if (= operator 'return) 62 23))

 (62 (return (FCL:evalexpr (. (, cmd)) vs)))

 (23 (return (list 'error: cmd))) )

  {division}
  (pp vs program) 

  {live-map}
(
(50 pp block-map vs)
(51 block block-map vs)
(52 cmd block block-map vs)
(521 var rhs block block-map vs)
(53 var rhs block block-map vs)
(54 var rhs block block-map vs)
(55 block-map operator vs cmd)
(56 cmd block-map vs)
(57 pp1 block-map vs)
(58 pp2 block-map vs)
(59 block-map operator vs cmd)
(60 cmd block-map vs)
(61 operator vs cmd)
(62 cmd vs)
(23 cmd) )
))


(specialize ONMIX onmix-div init-vals2 onmix-live)
