{             -= lukier składniowy - smaczny i zdrowy! =-

  Zamienia formy "?" (COND), "and" i "or" na zagnieżdżone wyrażenia warunkowe,
  formy "let" na wyrażenia lambda, oraz operator o zmiennej ilości argumentów
  "list" na zagnieżdżenie operatorów ";" (CONS).
  + dodano obsługę "not", "all" i "any",
  + poprawiony let2cons (teraz woła desugar rekursywnie po wiązanych wartościach).

  Innymi słowy kompilator drcz1 -> drcz0. }

(! desugar (^ (code)
   	      (? ((@ code) code)
		 ((= (. code) 'quote) code)
		 ((= (. code) '?) (cond2if (, code) desugar))
		 ((= (. code) 'not) (not2if (, code) desugar))
		 ((= (. code) 'or) (or2if (, code) desugar))
		 ((= (. code) 'and) (and2if (, code) desugar))
		 ((= (. code) 'all) (all2if (, code) desugar))
		 ((= (. code) 'any) (any2if (, code) desugar))
		 ((= (. code) 'let) (let2lambda (, code) desugar))
		 ((= (. code) 'list) (list2cons (, code) desugar))
		 (T (; (desugar (. code))
		       (desugar (, code)))))))


{ - kluczowe transformacje: - }

{ (cond (p1 e1) ... (pn en) (T e0)) -> (if p1 e1 (... (if pn en e0) ... ) }
(! cond2if (^ (condlist cont)
   	      (? ((= condlist ()) ())
	      	 ((= (.. condlist) 'T) (cont (.,. condlist)))
		 (T (list 'if
		    	   (cont (.. condlist))
		    	   (cont (.,. condlist))
		    	   (cond2if (, condlist) cont))))))

{ (not p) -> (if [p] () T) }
(! not2if (^ (notexp cont) (list 'if (cont (. notexp)) () T)))

{ (or p1 p2) -> (if [p1] T [p2]) }
(! or2if (^ (orexp cont)
   	    (list 'if
	     	   (cont (. orexp))
		   'T
		   (cont (., orexp)))))

{ (and p1 p2) -> (if [p1] [p2] ()) }
(! and2if (^ (andexp cont)
   	     (list 'if
	     	    (cont (. andexp))             
		    (cont (., andexp))
		    ())))

(! any2if (^ (pl cont)
             (if pl
                 (list 'if
                       (cont (. pl))
                       'T
                       (any2if (, pl) cont))
                 {else}())))

(! all2if (^ (pl cont)
             (if pl
                 (list 'if
                       (cont (. pl))                       
                       (all2if (, pl) cont)
                       ())
                 {else}'T)))


{ (let ((s1 e1) ... (sn en)) e) -> ((^ (s1 ... sn) e) e1 ... en) }
(! let2lambda (^ (letexp cont)
   	      	 (; (; '^
		       (; (extract-syms (. letexp))
		       	  (cont (, letexp))))
		    (mapcar cont (extract-vals (. letexp))))))

{ tj. (let ((s1 e1) ... (sn en)) e') -> ((^ (s1 ... sn) e') e1 ... en). }

(! list2cons (^ (listargs cont)
   	      	(if listargs
	 	     (list ';
		     	   (cont (. listargs))
			   (list2cons (, listargs) cont))
		 {else} ())))
{tj. (list a1 ... an) -> (; a1 ... (; an ()) ...) }

{ - i ich pomocnicy: - }

(! .. (^ (e) (. (. e))))
(! ., (^ (e) (. (, e))))
(! .,. (^ (e) (. (, (. e)))))

(! mapcar (^ (p l)
       	     (if l
		 (; (p (. l)) (mapcar p (, l)))
	     {else} ())))

(! extract-syms (^ (ab) (mapcar (^ (x) (. x)) ab)))
(! extract-vals (^ (ab) (mapcar (^ (x) (., x)) ab)))

{ i fajno. }

(desugar (read))
