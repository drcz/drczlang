(! desugar (^ (code) (if (empty? code) () (if (@ code) code (if (= (. code) (quote ?)) (cond2if (, code)) (if (= (. code) (quote let)) (let2lambda (, code)) (; (desugar (. code)) (desugar (, code)))))))))
(! cond2if (^ (condlist) (if (empty? condlist) () (if (= (.. condlist) (quote t)) (desugar (.,. condlist)) (list4 (quote if) (desugar (.. condlist)) (desugar (.,. condlist)) (cond2if (, condlist)))))))
(! let2lambda (^ (letexp) (list2 (list3 (quote ^) (unpair-a (. letexp)) (, letexp)) (unpair-b (. letexp)))))
(! .. (^ (e) (. (. e))))
(! ., (^ (e) (. (, e))))
(! .,. (^ (e) (. (, (. e)))))
(! list2 (^ (a b) (; a (; b ()))))
(! list3 (^ (a b c) (; a (; b (; c ())))))
(! list4 (^ (a b c d) (; a (; b (; c (; d ()))))))
(! empty? (^ (e) (= e ())))
(! mapcar (^ (p l) (if (empty? l) () (; (p (. l)) (mapcar p (, l))))))
(! unpair-a (^ (ab) (mapcar (^ (x) (. x)) ab)))
(! unpair-b (^ (ab) (mapcar (^ (x) (., x)) ab)))
