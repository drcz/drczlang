(! primopnames (quote (; . , # @ = disp read + - * / % > <)))
(! repl (^ (sideeffect env) (repl (disp (eval (read) env)) env)))
(! eval (^ (expr env) (if (= expr ()) expr (if (# expr) expr (if (@ expr) (lookup expr env) (if (= (. expr) (quote quote)) (. (, expr)) (if (= (. expr) (quote ^)) expr (if (= (. expr) (quote !)) (update-env (. (, expr)) (eval (. (, (, expr))) env) env) (if (= (. expr) (quote if)) (eval-if (. (, expr)) (. (, (, expr))) (. (, (, (, expr)))) env) (apply (. expr) (evlis (, expr) env) env))))))))))
(! map (^ (proc list) (if (= list ()) () (; (proc (. list)) (map proc (, list))))))
(! append (^ (a b) (if (= a ()) b (; (. a) (append (, a) b)))))
(! pair (^ (a b) (if (= a ()) () (; (; (. a) (. b)) (pair (, a) (, b))))))
(! member? (^ (el list) (if (= list ()) () (if (= el (. list)) t (member? el (, list))))))
(! evlis (^ (list env) (if (= list ()) () (; (eval (. list) env) (evlis (, list) env)))))
(! lookup (^ (key alist) (if (= alist ()) () (if (= key (. (. alist))) (, (. alist)) (lookup key (, alist))))))
(! eval-if (^ (condition branch1 branch2 env) (if (eval condition env) (eval branch1 env) (eval branch2 env))))
(! apply (^ (op args env) (if (= op ()) (quote (err: apply (nil))) (if (# op) (quote (err: apply (number))) (if (is-primop? op) (apply-prim op args) (if (@ op) (apply (eval op env) args env) (if (= (. op) (quote ^)) (apply-lambda (. (, op)) (. (, (, op))) args env) (quote (err: apply)))))))))
(! is-primop? (^ (sym) (member? sym primopnames)))
(! apply-prim (^ (op args) (if (= op (quote ;)) (; (. args) (. (, args))) (if (= op (quote .)) (. (. args)) (if (= op (quote ,)) (, (. args)) (if (= op (quote #)) (# (. args)) (if (= op (quote @)) (@ (. args)) (if (= op (quote =)) (= (. args) (. (, args))) (if (= op (quote read)) (read) (if (= op (quote disp)) (disp (. args)) (if (= op (quote +)) (+ (. args) (. (, args))) (if (= op (quote -)) (- (. args) (. (, args))) (if (= op (quote *)) (* (. args) (. (, args))) (if (= op (quote /)) (/ (. args) (. (, args))) (if (= op (quote %)) (% (. args) (. (, args))) (if (= op (quote >)) (> (. args) (. (, args))) (if (= op (quote <)) (< (. args) (. (, args))) (quote (err (unknown primop))))))))))))))))))))
(! apply-lambda (^ (arglist body argvals env) (eval body (append (pair arglist argvals) env))))
(! update-env (^ (sym val env) (repl (disp val) (; (; sym val) env))))
(! run (^ () (repl (disp (quote (- drcz0 sÅ‚ucha -))) (; (; (quote t) (quote t)) (pair primopnames primopnames)))))
