(! compile (^ (program) (append-all (map comp program))))
(! null? (^ (expr) (= expr (quote ()))))
(! .. (^ (e) (. (. e))))
(! ,. (^ (e) (, (. e))))
(! ., (^ (e) (. (, e))))
(! .,, (^ (e) (. (, (, e)))))
(! .,,, (^ (e) (. (, (, (, e))))))
(! list2 (^ (a b) (; a (; b ()))))
(! list3 (^ (a b c) (; a (; b (; c ())))))
(! list4 (^ (a b c d) (; a (; b (; c (; d ()))))))
(! member? (^ (el list) (if (null? list) () (if (= el (. list)) t (member? el (, list))))))
(! append (^ (a b) (if (null? a) b (; (. a) (append (, a) b)))))
(! reverse (^ (x) (if (null? x) () (append (reverse (, x)) (; (. x) ())))))
(! map (^ (p list) (if (null? list) () (; (p (. list)) (map p (, list))))))
(! pair (^ (a b) (if (null? a) () (; (; (. a) (. b)) (pair (, a) (, b))))))
(! assoc (^ (key alist) (if (null? alist) () (if (= key (.. alist)) (,. alist) (assoc key (, alist))))))
(! reduce (^ (op neutr list) (if (null? list) neutr (op (. list) (reduce op neutr (, list))))))
(! append-all (^ (ll) (reduce append () ll)))
(! comp (^ (expr) (if (is-const? expr) (comp-const expr) (if (is-primop? expr) (comp-primop expr) (if (is-variable? expr) (list2 (quote lu) expr) (if (is-label-form? expr) (comp-label expr) (if (is-if-form? expr) (comp-if expr) (if (is-lambda-form? expr) (comp-lambda expr) (comp-application expr)))))))))
(! comp-application (^ (expr) (append (append-all (map comp (reverse expr))) (if (is-primop? (. expr)) (quote ()) (quote (ap))))))
(! is-const? (^ (expr) (if (null? expr) t (if (# expr) t (if (@ expr) () (= (. expr) (quote quote)))))))
(! is-variable? (^ (expr) (if (null? expr) () (if (# expr) () (if (@ expr) t ())))))
(! is-cons? (^ (expr) (if (@ expr) () t)))
(! is-primop? (^ (expr) (member? expr (quote (= . , ; # @ + - * / % > < disp read)))))
(! is-if-form? (^ (expr) (if (@ expr) () (if (= (. expr) (quote if)) t ()))))
(! is-label-form? (^ (expr) (if (@ expr) () (if (= (. expr) (quote !)) t ()))))
(! is-lambda-form? (^ (expr) (if (@ expr) () (if (= (. expr) (quote ^)) t ()))))
(! primop-names (pair (quote (= @ # . , ; + - * / % > < disp read)) (quote (eq atom num car cdr cons add sub mul div mod gt lt disp read))))
(! comp-primop (^ (expr) (; (assoc expr primop-names) ())))
(! comp-const (^ (expr) (if (@ expr) (list2 (quote ldc) expr) (if (= (. expr) (quote quote)) (; (quote ldc) (, expr)) (quote err)))))
(! comp-if (^ (expr) ((^ (cnd tb fb) (append cnd (; (quote sel) (; tb (; fb ()))))) (comp (., expr)) (append (comp (.,, expr)) (quote (rtn))) (append (comp (.,,, expr)) (quote (rtn))))))
(! comp-label (^ (expr) ((^ (sym val) (append val (list2 (quote bind) sym))) (., expr) (comp (.,, expr)))))
(! comp-lambda (^ (expr) ((^ (arglist body) (list2 (quote ldc) (append (bind-block-for arglist) (append body (unbind-rtn-block-for arglist))))) (., expr) (comp (.,, expr)))))
(! bind-block-for (^ (al) (if (null? al) () (; (quote bind) (; (. al) (bind-block-for (, al)))))))
(! unbind-rtn-block-for (^ (al) (if (null? al) (quote (rtn)) (; (quote unbind) (; (. al) (unbind-rtn-block-for (, al)))))))
