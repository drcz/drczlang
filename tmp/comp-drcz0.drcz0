{ -- kompilator drcz0 -> srecd -- }

(! compile (^ (program) (append-all (map comp program))))

(! null? (^ (expr) (= expr '())))
(! .. (^ (e) (. (. e))))
(! ,. (^ (e) (, (. e))))
(! ., (^ (e) (. (, e))))
(! .,, (^ (e) (. (, (, e)))))
(! .,,, (^ (e) (. (, (, (, e))))))

(! list2 (^ (a b) (; a (; b ()))))
(! list3 (^ (a b c) (; a (; b (; c ())))))
(! list4 (^ (a b c d) (; a (; b (; c (; d ()))))))

(! member? (^ (el list)
   	      (if (null? list)
	     	  ()
		  (if (= el (. list))
		      T
		      (member? el (, list))))))

(! append (^ (a b)
   	     (if (null? a)
	     	 b
		 (; (. a) (append (, a) b)))))

(! reverse (^ (x)
   	      (if (null? x)
	      	  ()
		  (append (reverse (, x)) (; (. x) ())))))

(! map (^ (p list)
       	  (if (null? list)
	      ()
	      (; (p (. list)) (map p (, list))))))

(! pair (^ (a b)
   	   (if (null? a)
	       ()
	       (; (; (. a) (. b))
	       	  (pair (, a) (, b))))))

(! assoc (^ (key alist)
   	    (if (null? alist)
	    	()
		(if (= key (.. alist))
		    (,. alist)
		    (assoc key (, alist))))))

(! reduce (^ (op neutr list)
   	     (if (null? list)
	     	 neutr
		 (op (. list) (reduce op neutr (, list))))))

(! append-all (^ (ll) (reduce append () ll)))

{ ------------------------------------------------------------------- }

(! comp (^ (expr)
   	   (if (is-const? expr)
	       (comp-const expr)
	       (if (is-primop? expr)
	       	   (comp-primop expr)
	       	   (if (is-variable? expr)
	       	       (list2 'LU expr)
		       (if (is-label-form? expr)
		       	   (comp-label expr)
			   (if (is-if-form? expr)
		       	       (comp-if expr)
			       (if (is-lambda-form? expr)
			       	   (comp-lambda expr)
			       	   (comp-application expr)))))))))

(! comp-application (^ (expr)
   		       (append (append-all (map comp (reverse expr)))
		       	       (if (is-primop? (. expr))
			       	   '()
				   '(AP)))))

(! is-const? (^ (expr)
   	     	(if (null? expr)
		    T
		    (if (# expr)
		    	T
			(if (@ expr)
			    ()
			    (= (. expr) 'QUOTE))))))

(! is-variable? (^ (expr)
   		   (if (null? expr)
		       ()
		       (if (# expr)
		       	   ()
			   (if (@ expr)
			       T
			       () )))))

(! is-cons? (^ (expr) (if (@ expr) () T)))

(! is-primop? (^ (expr) (member? expr '(= . , ; # @ + - * / % > < disp read))))

(! is-if-form? (^ (expr)
   	       	  (if (@ expr)
		      ()
		      (if (= (. expr) 'if)
		     	  T
			  () ))))

(! is-label-form? (^ (expr)
   	       	     (if (@ expr)
		      	 ()
		      	 (if (= (. expr) '!)
		     	     T
			     () ))))

(! is-lambda-form? (^ (expr)
   	       	      (if (@ expr)
		      	  ()
		      	  (if (= (. expr) '^)
		     	      T
			      () ))))

(! primop-names (pair '(= @ # . , ; + - * / % > < disp read)
   		      '(EQ ATOM NUM CAR CDR CONS ADD SUB MUL DIV MOD GT LT DISP READ)))

(! comp-primop (^ (expr) (; (assoc expr primop-names) ())))

(! comp-const (^ (expr)
   	      	 (if (@ expr)
		     (list2 'LDC expr)
		     (if (= (. expr) 'quote)
		     	 (; 'LDC (, expr))
		     	 'ERR))))

(! comp-if (^ (expr)
   	      ((^ (cnd tb fb)
	          (append cnd
		  	  (; 'SEL (; tb (; fb ())))))
		(comp (., expr))                  {cnd}
		(append (comp (.,, expr)) '(RTN))  {tb} 
		(append (comp (.,,, expr)) '(RTN)) {fb} 
	      )))

(! comp-label (^ (expr)
   	      	 ((^ (sym val)
		     (append val (list2 'BIND sym)))
		  (., expr)         {sym}
		  (comp (.,, expr)) {val}
   	         )))

(! comp-lambda (^ (expr)
   	       	  ((^ (arglist body)
		      (list2 'LDF (append (bind-block-for arglist)
		      	      	      	  (append body
			      	      	      	  (unbind-rtn-block-for arglist)))))
	           (., expr)      {arglist}
		   (comp (.,, expr)) {body}
		  )))

(! bind-block-for (^ (al)
   		     (if (null? al)
		     	 ()
			 (; 'BIND
			    (; (. al)
			       (bind-block-for (, al)))))))

(! unbind-rtn-block-for (^ (al)
   		     	   (if (null? al)
		     	       '(RTN)
			       (; 'UNBIND
			       	  (; (. al)
			       	     (unbind-rtn-block-for (, al)))))))
